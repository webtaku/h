{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAwCA,SAAS,CAAC,CACR,WAAc,KAAU,EACxB,GAAG,QAAyC;IAE5C,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACvC,MAAM,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC;IAE9B,IAAI,EAAE,GAAG,EAAE,CAAC;IACZ,MAAM,OAAO,GAAa,EAAE,CAAC;IAC7B,MAAM,KAAK,GAA2B,EAAE,CAAC;IACzC,IAAI,KAAK,GAAG,EAAE,CAAC;IAEf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;QACzC,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAc,CAAC;QACnC,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3B,IAAI,CAAC,KAAK;YAAE,SAAS;QACrB,IAAI,IAAI,KAAK,GAAG;YAAE,EAAE,GAAG,KAAK,CAAC;aACxB,IAAI,IAAI,KAAK,GAAG;YAAE,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7C,CAAC;IAED,MAAM,SAAS,GAAa,EAAE,CAAC;IAE/B,KAAK,MAAM,KAAK,IAAI,QAAQ,EAAE,CAAC;QAC7B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,CAAC;aAAM,CAAC;YACN,MAAM,KAAK,GAAG,KAAwB,CAAC;YACvC,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;gBACjD,IAAI,GAAG,KAAK,OAAO,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;oBACjD,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,KAA4B,CAAC;yBACjD,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;yBAC7B,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChB,CAAC;qBAAM,IAAI,GAAG,KAAK,OAAO,EAAE,CAAC;oBAC3B,OAAO,CAAC,IAAI,CAAC,GAAI,KAAgB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;gBAClD,CAAC;qBAAM,CAAC;oBACN,KAAK,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC7B,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IAED,IAAI,UAAU,GAAG,EAAE,CAAC;IACpB,IAAI,EAAE;QAAE,UAAU,IAAI,QAAQ,EAAE,GAAG,CAAC;IACpC,IAAI,OAAO,CAAC,MAAM;QAAE,UAAU,IAAI,WAAW,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;IAClE,IAAI,KAAK;QAAE,UAAU,IAAI,WAAW,KAAK,GAAG,CAAC;IAC7C,KAAK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;QAC3C,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,KAAK,OAAO;YAAE,SAAS,CAAC,QAAQ;QACpE,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;IAC/B,CAAC;IAED,OAAO,IAAI,GAAG,GAAG,UAAU,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,GAAG,GAAG,CAAC;AAC/D,CAAC;AAED,OAAO,EAAE,CAAC,EAAE,CAAC","sourcesContent":["type CustomTag = `${string}-${string}`;\n\ntype Tag = '' | keyof HTMLElementTagNameMap | CustomTag;\n\ntype Selector =\n  | Tag\n  | `${Tag}#${string}`\n  | `${Tag}.${string}`\n  | `${Tag}#${string}.${string}`;\n\ntype ElementByTag<T extends Tag | string> = (\n  T extends '' ? HTMLDivElement\n  : (\n    T extends keyof HTMLElementTagNameMap ? HTMLElementTagNameMap[T]\n    : HTMLElement\n  )\n);\n\ntype ElementBySelector<S extends Selector> = (\n  S extends '' ? HTMLDivElement\n  : (\n    S extends keyof HTMLElementTagNameMap ? HTMLElementTagNameMap[S]\n    : (\n      S extends `${infer T}#${string}` ? ElementByTag<T>\n      : (\n        S extends `${infer T}.${string}` ? ElementByTag<T>\n        : HTMLElement\n      )\n    )\n  )\n);\n\ntype ElementProps<\n  S extends Selector,\n  A extends Record<string, unknown> = {}\n> =\n  & Partial<Omit<ElementBySelector<S>, 'style'>>\n  & { style?: Partial<CSSStyleDeclaration> }\n  & A;\n\nfunction h<S extends Selector, A extends Record<string, unknown> = {}>(\n  selector: S = 'div' as S,\n  ...children: (string | ElementProps<S, A>)[]\n): string {\n  const parts = selector.split(/([#.])/);\n  const tag = parts[0] || 'div';\n\n  let id = '';\n  const classes: string[] = [];\n  const attrs: Record<string, string> = {};\n  let style = '';\n\n  for (let i = 1; i < parts.length; i += 2) {\n    const type = parts[i] as '#' | '.';\n    const value = parts[i + 1];\n    if (!value) continue;\n    if (type === '#') id = value;\n    else if (type === '.') classes.push(value);\n  }\n\n  const innerHTML: string[] = [];\n\n  for (const child of children) {\n    if (typeof child === 'string') {\n      innerHTML.push(child);\n    } else {\n      const props = child as ElementProps<S>;\n      for (const [key, value] of Object.entries(props)) {\n        if (key === 'style' && typeof value === 'object') {\n          style = Object.entries(value as CSSStyleDeclaration)\n            .map(([k, v]) => `${k}: ${v}`)\n            .join('; ');\n        } else if (key === 'class') {\n          classes.push(...(value as string).split(/\\s+/));\n        } else {\n          attrs[key] = String(value);\n        }\n      }\n    }\n  }\n\n  let attrString = '';\n  if (id) attrString += ` id=\"${id}\"`;\n  if (classes.length) attrString += ` class=\"${classes.join(' ')}\"`;\n  if (style) attrString += ` style=\"${style}\"`;\n  for (const [k, v] of Object.entries(attrs)) {\n    if (k === 'id' || k === 'class' || k === 'style') continue; // 이미 처리\n    attrString += ` ${k}=\"${v}\"`;\n  }\n\n  return `<${tag}${attrString}>${innerHTML.join('')}</${tag}>`;\n}\n\nexport { h };\n"]}